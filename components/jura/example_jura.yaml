substitutions:
  devicename: jura_coffee
  friendly_name: Coffee Machine
  device_description: Jura E8 Coffee Machine in Kitchen
  device_icon: mdi:coffee

esphome:
  name: ${devicename}
  friendly_name: ${friendly_name}
  comment: ${device_description}

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# WiFi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} Fallback Hotspot"
    password: !secret fallback_password

# Standard configuration
api:
  encryption:
    key: !secret api_key

ota:
  - platform: esphome
    password: !secret ota_password

logger:
  level: DEBUG
  logs:
    jura: VERBOSE

captive_portal:

# External component configuration
external_components:
  - source:
      type: local
      path: jura

# UART for Jura communication
uart:
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
  id: uart_bus

# Enhanced globals for screen and state tracking
globals:
  - id: current_screen
    type: int
    restore_value: false
    initial_value: '1'  # 1=Coffee Screen 1, 2=Coffee Screen 2, 3-7=Menu screens 1-5
  - id: is_brewing
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: brew_start_time
    type: unsigned long
    restore_value: false
    initial_value: '0'

# Jura component with only working sensors for E8 model
jura:
  uart_id: uart_bus
  update_interval: 60s
  timeout_ms: 5000
  
  # Coffee counter sensors (only ones that work on E8)
  single_espresso:
    id: num_single_espresso
    name: "Single Espressos Made"
    device_class: ""
    state_class: "total_increasing"
  double_espresso:
    id: num_double_espresso
    name: "Double Espressos Made"
    device_class: ""
    state_class: "total_increasing"
  coffee:
    id: num_coffee
    name: "Coffees Made"
    device_class: ""
    state_class: "total_increasing"
  double_coffee:
    id: num_double_coffee
    name: "Double Coffees Made"
    device_class: ""
    state_class: "total_increasing"
  cleanings:
    id: num_clean
    name: "Cleanings Performed"
    device_class: ""
    state_class: "total_increasing"

# All machine controls as buttons (no switches for E8)
button:
  - platform: template
    name: 'Power Off Coffee Machine'
    icon: "mdi:power"
    id: jura_power_off_button
    on_press:
      - uart.write: [0xFB, 0xDF, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xDF, 0xDB, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDB, 0xDB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xDB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xFF, 0xDB, 0xDB]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xDB, 0xDB]
      - lambda: |-
          id(current_screen) = 1;
          id(is_brewing) = false;

  - platform: template
    name: 'Top Left Button'
    icon: "mdi:coffee"
    id: top_left_button
    on_press:
      - uart.write: [0xFB, 0xDF, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xDF, 0xDB, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDB, 0xDB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDB, 0xDF, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xFF, 0xDB, 0xDB]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xDB, 0xDB]
      - lambda: |-
          if (id(current_screen) <= 2 && !id(is_brewing)) {
            id(is_brewing) = true;
            id(brew_start_time) = millis();
          }

  - platform: template
    name: 'Top Right Button'
    icon: "mdi:coffee-maker"
    id: top_right_button
    on_press:
      - uart.write: [0xFB, 0xDF, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xDF, 0xDB, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDB, 0xDB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xFF, 0xDF, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xFF, 0xDB, 0xDB]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xDB, 0xDB]
      - lambda: |-
          if (id(current_screen) <= 2 && !id(is_brewing)) {
            id(is_brewing) = true;
            id(brew_start_time) = millis();
          }

  - platform: template
    name: 'Middle Left Button'
    icon: "mdi:coffee-outline"
    id: middle_left_button
    on_press:
      - uart.write: [0xFB, 0xDF, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xDF, 0xDB, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDB, 0xDB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xDF, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xFF, 0xDB, 0xDB]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xDB, 0xDB]
      - lambda: |-
          if (id(current_screen) <= 2 && !id(is_brewing)) {
            id(is_brewing) = true;
            id(brew_start_time) = millis();
          }

  - platform: template
    name: 'Middle Right Button'
    icon: "mdi:coffee-maker-outline"
    id: middle_right_button
    on_press:
      - uart.write: [0xFB, 0xDF, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xDF, 0xDB, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDB, 0xDB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDB, 0xFB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xFF, 0xDB, 0xDB]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xDB, 0xDB]
      - lambda: |-
          if (id(current_screen) <= 2 && !id(is_brewing)) {
            id(is_brewing) = true;
            id(brew_start_time) = millis();
          }

  - platform: template
    name: 'Menu/Back/Cancel Button'
    icon: "mdi:backburger"
    id: menu_back_button
    on_press:
      - uart.write: [0xFB, 0xDF, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xDF, 0xDB, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDB, 0xDB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xFB, 0xDF, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xFF, 0xDB, 0xDB]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xDB, 0xDB]
      - lambda: |-
          if (id(is_brewing)) {
            // Cancel brewing
            id(is_brewing) = false;
            id(brew_start_time) = 0;
          } else if (id(current_screen) == 1 || id(current_screen) == 2) {
            // From coffee screens to menu 1
            id(current_screen) = 3;
          } else if (id(current_screen) >= 3) {
            // From any menu back to coffee screen 1
            id(current_screen) = 1;
          }

  - platform: template
    name: 'Next Button'
    icon: "mdi:chevron-right"
    id: next_button
    on_press:
      - uart.write: [0xFB, 0xDF, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xDF, 0xDB, 0xDB, 0xDF]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDB, 0xDB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xFB, 0xFF, 0xDB]
      - delay: 8ms
      - uart.write: [0xDF, 0xFF, 0xDB, 0xDB]
      - delay: 8ms
      - uart.write: [0xFB, 0xFB, 0xDB, 0xDB]
      - lambda: |-
          if (id(current_screen) == 1) {
            id(current_screen) = 2;
          } else if (id(current_screen) == 2) {
            id(current_screen) = 1;
          } else if (id(current_screen) >= 3 && id(current_screen) < 7) {
            id(current_screen) += 1;
          } else if (id(current_screen) == 7) {
            id(current_screen) = 3;
          }

# Text sensors for screen state and button functions
text_sensor:
  - platform: template
    name: "Current Screen"
    id: current_screen_sensor
    icon: "mdi:monitor"
    lambda: |-
      switch (id(current_screen)) {
        case 1: return {"Coffee Screen 1"};
        case 2: return {"Coffee Screen 2"};
        case 3: return {"Menu 1"};
        case 4: return {"Menu 2"};
        case 5: return {"Menu 3"};
        case 6: return {"Menu 4"};
        case 7: return {"Menu 5"};
        default: return {"Unknown"};
      }
    update_interval: 1s

  - platform: template
    name: "Top Left Button Function"
    id: top_left_function
    lambda: |-
      if (id(is_brewing)) {
        unsigned long elapsed = millis() - id(brew_start_time);
        if (elapsed <= 4000) return {"Strength +"};
        else if (elapsed <= 14000) return {"Volume +"};
        else return {"N/A"};
      }
      switch (id(current_screen)) {
        case 1: return {"Espresso"};
        case 2: return {"Cappuccino"};
        case 3: return {"Clean"};
        case 4: return {"Rinse Milk"};
        case 5: return {"Expert Mode"};
        case 6: return {"Language"};
        case 7: return {"Water Hardness"};
        default: return {"N/A"};
      }
    update_interval: 1s

  - platform: template
    name: "Top Right Button Function"
    id: top_right_function
    lambda: |-
      if (id(is_brewing)) {
        unsigned long elapsed = millis() - id(brew_start_time);
        if (elapsed <= 4000) return {"Strength -"};
        else if (elapsed <= 14000) return {"Volume -"};
        else return {"N/A"};
      }
      switch (id(current_screen)) {
        case 1: return {"Coffee"};
        case 2: return {"Flat White"};
        case 3: return {"Clean Milk"};
        case 4: return {"Rinse Coffee"};
        case 5: return {"N/A"};
        case 6: return {"Switch Off After"};
        case 7: return {"N/A"};
        default: return {"N/A"};
      }
    update_interval: 1s

  - platform: template
    name: "Middle Left Button Function"
    id: middle_left_function
    lambda: |-
      if (id(is_brewing)) {
        unsigned long elapsed = millis() - id(brew_start_time);
        if (elapsed <= 4000) return {"Strength +"};
        else if (elapsed <= 14000) return {"Volume +"};
        else return {"N/A"};
      }
      switch (id(current_screen)) {
        case 1: return {"Ristretto"};
        case 2: return {"Latte Macchiato"};
        case 3: return {"Descale"};
        case 4: return {"Information"};
        case 5: return {"N/A"};
        case 6: return {"Units"};
        case 7: return {"N/A"};
        default: return {"N/A"};
      }
    update_interval: 1s

  - platform: template
    name: "Middle Right Button Function"
    id: middle_right_function
    lambda: |-
      if (id(is_brewing)) {
        unsigned long elapsed = millis() - id(brew_start_time);
        if (elapsed <= 4000) return {"Strength -"};
        else if (elapsed <= 14000) return {"Volume -"};
        else return {"N/A"};
      }
      switch (id(current_screen)) {
        case 1: return {"Hot Water"};
        case 2: return {"1 Portion Milk"};
        case 3: return {"Filter Status"};
        case 4: return {"Filter"};
        case 5: return {"N/A"};
        case 6: return {"Rinse Milk"};
        case 7: return {"N/A"};
        default: return {"N/A"};
      }
    update_interval: 1s

  - platform: template
    name: "Bottom Left Button Function"
    id: bottom_left_function
    lambda: |-
      if (id(is_brewing)) return {"Cancel"};
      if (id(current_screen) <= 2) return {"Menu"};
      return {"Return"};
    update_interval: 1s

  - platform: template
    name: "Bottom Right Button Function"
    id: bottom_right_function
    lambda: |-
      return {"Next"};
    update_interval: 1s

  - platform: version
    name: "${friendly_name} ESPHome Version"
    entity_category: diagnostic
    
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      entity_category: diagnostic
    ssid:
      name: "${friendly_name} Connected SSID"
      entity_category: diagnostic

# Binary sensors for state tracking
binary_sensor:
  - platform: template
    name: "Is Brewing"
    id: is_brewing_sensor
    lambda: |-
      return id(is_brewing);
    update_interval: 1s

  - platform: status
    name: "${friendly_name} Status"
    entity_category: diagnostic

# Numeric sensors
sensor:
  - platform: uptime
    name: "${friendly_name} Uptime"
    device_class: duration
    state_class: "total_increasing"
    entity_category: diagnostic
    
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s
    entity_category: diagnostic

  - platform: template
    name: "Total Coffees Made Today"
    icon: "mdi:counter"
    lambda: |-
      return id(num_single_espresso).state + 
             id(num_double_espresso).state + 
             id(num_coffee).state + 
             id(num_double_coffee).state;
    update_interval: 60s

  - platform: template
    name: "Brew Timer"
    icon: "mdi:timer"
    unit_of_measurement: "s"
    lambda: |-
      if (id(is_brewing) && id(brew_start_time) > 0) {
        return (float)(millis() - id(brew_start_time)) / 1000.0;
      }
      return 0.0;
    update_interval: 1s

# Status LED (simple, no actions)
status_led:
  pin:
    number: GPIO2
    inverted: false
